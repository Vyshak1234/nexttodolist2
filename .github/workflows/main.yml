name: PR – Create Alpha env when PR is raised

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    branches: [main]

env:
  ARGOCD_APPLICATION: ${{ vars.ARGOCD_APPLICATION }}
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  postgres-backup:
    name: Backup DB to S3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::533260833584:role/gitactiontest
          role-session-name: github-actions-backup
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name vyshak-gitactiontest-01a2b3c4 --region us-east-1

      - name: Apply pg_dump job (with PR number)
        run: envsubst < .github/workflows/k8s/jobs/pg-backup-job.yaml | kubectl apply -f -
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}

  wait-for-s3:
    name: Wait for backup to upload
    needs: postgres-backup
    runs-on: ubuntu-latest
    steps:
      - name: Wait 30 seconds
        run: sleep 30

  postgres-restore:
    name: Restore DB from S3
    needs: wait-for-s3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::533260833584:role/gitactiontest
          role-session-name: github-actions-restore
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name vyshak-gitactiontest-01a2b3c4 --region us-east-1

      - name: Apply pg_restore job (with PR number)
        run: envsubst < .github/workflows/k8s/jobs/pg-restore-job.yaml | kubectl apply -f -
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}

  build-image:
    name: Build and Push Images (Common ECR Account)
    runs-on: ubuntu-latest
    needs: postgres-restore
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
      image_repository: acceleraterapp
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::533260833584:role/gitactiontest
          role-session-name: github-actions-restore
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name vyshak-gitactiontest-01a2b3c4 --region us-east-1

      - name: Delete temporary pgdump and pgrestore jobs
        run: |
          kubectl delete job pgdump-upload-pr-${PR_NUMBER}-job --ignore-not-found
          kubectl delete job pgrestore-alpha-${PR_NUMBER}-job --ignore-not-found
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Set image tag
        id: set-tag
        run: echo "image_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push website backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: acceleraterapp
          IMAGE_TAG: ${{ steps.set-tag.outputs.image_tag }}
        run: |
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG --no-cache .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
          
  deploy-dev:
    name: Deploy to Dev (ArgoCD – Dev Account)
    runs-on: ubuntu-latest
    needs: build-image
    environment: development
    env:
      ARGOCD_SERVER: ${{ vars.ARGOCD_SERVER }}
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Configure AWS credentials via OIDC (Dev Account)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::533260833584:role/gitactiontest
          role-session-name: github-actions-dev
          aws-region: us-east-1
          audience: sts.amazonaws.com
  
      - name: Configure kubectl for ArgoCD
        run: aws eks update-kubeconfig --name vyshak-gitactiontest-01a2b3c4 --region us-east-1
  
      - name: Ensure alpha namespace exists
        run: |
          kubectl get namespace alpha-${PR_NUMBER} || kubectl create namespace alpha-${PR_NUMBER}

      - name: Fetch DB credentials from Secrets Manager   # ✅ FIXED INDENTATION
        id: fetch-secrets
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id rds/acceleraterapp/dev \
            --region us-east-1 \
            --query SecretString --output text)

          DB_HOST=$(echo $SECRET_JSON | jq -r .host)
          DB_PORT=$(echo $SECRET_JSON | jq -r .port)
          DB_USER=$(echo $SECRET_JSON | jq -r .username)
          DB_PASSWORD=$(echo $SECRET_JSON | jq -r .password)

          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

      - name: Create Kubernetes Secret
        run: |
          kubectl create secret generic rds-alpha-${PR_NUMBER}-secret \
            --from-literal=DB_HOST=${DB_HOST} \
            --from-literal=DB_PORT=${DB_PORT} \
            --from-literal=DB_USER=${DB_USER} \
            --from-literal=DB_PASSWORD="${DB_PASSWORD}" \
            --from-literal=DB_NAME=alpha-${PR_NUMBER} \
            -n alpha-${PR_NUMBER} \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
  
      - name: Generate preview domain
        run: |
          BRANCH_NAME=$(echo "${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          PREVIEW_DOMAIN="${BRANCH_NAME}.cms-alpha-${PR_NUMBER}.dev.stackgenie.io"
      
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "PREVIEW_DOMAIN=$PREVIEW_DOMAIN" >> $GITHUB_ENV

      - name: Get LoadBalancer DNS
        id: get-lb
        run: |
          LB_HOSTNAME=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "LB_HOSTNAME=$LB_HOSTNAME" >> $GITHUB_ENV

      - name: Create Route53 Record
        run: |
          cat > change-batch.json <<EOF
          {
            "Comment": "Add/Update record for PR preview",
            "Changes": [{
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "${PREVIEW_DOMAIN}",
                "Type": "CNAME",
                "TTL": 60,
                "ResourceRecords": [{ "Value": "${LB_HOSTNAME}" }]
              }
            }]
          }
          EOF

          aws route53 change-resource-record-sets \
            --hosted-zone-id Z01491701L37PMNAQJ3Q9 \
            --change-batch file://change-batch.json

      - name: Deploy ArgoCD Application
        env:
          ECR_REGISTRY: ${{ needs.build-image.outputs.ecr_registry }}
          IMAGE_REPOSITORY: ${{ needs.build-image.outputs.image_repository }}
          IMAGE_TAG: ${{ needs.build-image.outputs.image_tag }}
        run: |
          echo "$ARGOCD_APPLICATION" > application.yaml
  
          # Annotations for ArgoCD Image Updater
          yq -i '.metadata.annotations["argocd-image-updater.argoproj.io/write-back-method"] = "argocd"' application.yaml
          yq -i 'del(.metadata.annotations["argocd-image-updater.argoproj.io/write-back-target"])' application.yaml
  
          # Change application name
          yq -i ".metadata.name = \"alpha-website-${PR_NUMBER}\"" application.yaml
          
          # Namespace changes
          yq -i ".metadata.namespace = \"argocd\"" application.yaml
          yq -i ".spec.destination.namespace = \"alpha-${PR_NUMBER}\"" application.yaml
  
          # Helm parameters
          yq -i ".spec.source.helm.parameters += [{\"name\": \"image.repository\", \"value\": \"${ECR_REGISTRY}/${IMAGE_REPOSITORY}\"}]" application.yaml
          yq -i ".spec.source.helm.parameters += [{\"name\": \"image.tag\", \"value\": \"alpha-${IMAGE_TAG}\"}]" application.yaml
          yq -i '.spec.source.helm.parameters += [{"name": "ingress.hosts[0].host", "value": strenv(PREVIEW_DOMAIN)}]' application.yaml
          yq -i ".spec.source.helm.parameters += [{\"name\": \"envFrom[0].secretRef.name\", \"value\": \"rds-alpha-${PR_NUMBER}-secret\"}]" application.yaml

          # ✅ FIXED yq syncOptions handling
          yq -i '.spec.syncPolicy.syncOptions += ["CreateNamespace=true"]' application.yaml
          yq -i '.spec.syncPolicy.automated.selfHeal = false' application.yaml
  
          # Release name
          yq -i ".spec.source.helm.releaseName = \"alpha-website-${PR_NUMBER}\"" application.yaml
  
          # Debug
          echo "=== Final application.yaml ==="
          cat application.yaml
          echo "============================="
  
          kubectl apply -f application.yaml
  
      - name: Install ArgoCD CLI
        run: |
          wget -O argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          argocd version --client
  
      - name: Verify ArgoCD application was created
        run: |
          echo "Waiting for application to be created..."
          sleep 10
          kubectl get application alpha-website-${PR_NUMBER} -n argocd || echo "App not found"
  
      - name: Configure Git repository credentials in ArgoCD   # ✅ repo update
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
          
          # Update existing repo credentials (safe if already added)
          argocd repo update https://github.com/vyshakBlitz/nexttodolisthelm.git \
            --username vyshakBlitz \
            --password $GIT_TOKEN \
            --insecure || echo "⚠️ Repo update failed or not needed"

      - name: Login to ArgoCD and trigger alpha deployment sync   # ✅ retry loop
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
          
          for i in {1..5}; do
            if argocd app get alpha-website-${PR_NUMBER} >/dev/null 2>&1; then
              echo "✅ Application alpha-website-${PR_NUMBER} found, syncing..."
              argocd app terminate-op alpha-website-${PR_NUMBER} || true
              if argocd app sync alpha-website-${PR_NUMBER} --force; then
                echo "✅ Sync started successfully"
                break
              fi
            else
              echo "⏳ Application alpha-website-${PR_NUMBER} not ready yet, retrying in 15s..."
              sleep 15
            fi
          done

      - name: Wait for alpha deployment to complete
        run: |
          echo "⏳ Waiting for alpha-website-${PR_NUMBER} to finish syncing..."
          if ! argocd app wait alpha-website-${PR_NUMBER} --timeout 600 --health; then
            echo "❌ App failed to become healthy in time"
            argocd app get alpha-website-${PR_NUMBER}
            exit 1
          fi
          echo "✅ App sync and health check completed"
          argocd app get alpha-website-${PR_NUMBER}

      - name: Verify alpha namespace deployment
        run: |
          echo "🔍 Checking resources in namespace alpha-${PR_NUMBER}..."
          kubectl get pods -n alpha-${PR_NUMBER} -o wide || true
          kubectl get services -n alpha-${PR_NUMBER} || true
          kubectl get deployments -n alpha-${PR_NUMBER} || true
          echo "🔍 Checking ArgoCD Application status..."
          kubectl get application alpha-website-${PR_NUMBER} -n argocd -o yaml | yq eval '.status' - || true
